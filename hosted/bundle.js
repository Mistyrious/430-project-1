/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/client.js":
/*!**************************!*\
  !*** ./client/client.js ***!
  \**************************/
/***/ (() => {

eval("const showMessage = (response) => {\r\n    const status = document.getElementById('status');\r\n    const message = response.message;\r\n\r\n    status.innerHTML = message;\r\n};\r\n\r\n//returns a select with tierlist tiers\r\nconst createRankSelect = (idNum) => {\r\n    const selectDiv = document.createElement('div');\r\n    selectDiv.className = \"select is-fullwidth\";\r\n    const newSelect = document.createElement('select');\r\n    newSelect.id = `item${idNum}Score`;\r\n    newSelect.innerHTML = `\r\n        <option value=\"\">Item Score</option>\r\n        <option value=\"6\">S</option>\r\n        <option value=\"5\">A</option>\r\n        <option value=\"4\">B</option>\r\n        <option value=\"3\">C</option>\r\n        <option value=\"2\">D</option>\r\n        <option value=\"1\">F</option>\r\n    `;\r\n\r\n    selectDiv.appendChild(newSelect);\r\n    return selectDiv;\r\n}\r\n\r\n//adds an extra item input to the tierlist creation form\r\nconst addItemInput = () => {\r\n    let itemOL = document.querySelector('#itemInputs');\r\n    let i = itemOL.childElementCount + 1;\r\n    let newLI = document.createElement('li');\r\n    itemOL.appendChild(newLI);\r\n\r\n    const newInput = document.createElement('input');\r\n    newInput.className = \"input\";\r\n    newInput.id=`item${i}`;\r\n    newInput.type=\"text\";\r\n    newInput.name=`item${i}`;\r\n    newInput.placeholder=\"Item Name\";\r\n\r\n    const newSelect = createRankSelect(i);\r\n\r\n    newLI.appendChild(newInput);\r\n    newLI.appendChild(newSelect);\r\n}\r\n\r\n//create the HTML where users can add a tierlist\r\nconst addCreation = (amount) => {\r\n    let creationForm = document.getElementById('listCreation');\r\n    if(!creationForm.innerHTML){\r\n        creationForm.innerHTML += `\r\n        <h2 class=\"title\">Tierlist Creator</h2>\r\n        <div class=\"field>\r\n            <label class=\"label\" for=\"listName\">Name: </label>\r\n            <input class=\"input\" id=\"listName\" type=\"text\" name=\"listName\">\r\n        </div>\r\n        <div class=\"field>\r\n            <label class=\"label\" for=\"categoryInput\">Category: </label>\r\n            <input class=\"input\" id=\"categoryInput\" type=\"text\" name=\"categoryInput\">\r\n        </div>\r\n        <label class=\"label\" for=\"categoryInput\">Items: </label>\r\n        <ol id=\"itemInputs\"></ol>\r\n        <button class=\"button\" id=\"addItem\" type=\"button\">Add Item Field</button>\r\n        <input class=\"button\" type=\"submit\" value=\"Create List\">`;\r\n    }\r\n    for(let i = 0; i < amount; i++){\r\n        addItemInput();\r\n    }\r\n\r\n    document.getElementById('addItem').addEventListener('click', addItemInput);\r\n}\r\n\r\n//updates the selects for user to choose a tierlist from\r\nconst displaySelects = (listData) => {\r\n    const categorySelect = document.getElementById('listCategory');\r\n    const listSelect = document.getElementById('listSelect');\r\n\r\n    if (categorySelect.innerHTML === \"\") {\r\n        const emptyValue = document.createElement('option');\r\n        emptyValue.value = \"\";\r\n        emptyValue.innerHTML = \"\";\r\n        categorySelect.appendChild(emptyValue);\r\n\r\n        const uniqueCategories = new Set(listData.listCategories);\r\n        uniqueCategories.forEach((category) => {\r\n            const newValue = document.createElement('option');\r\n            newValue.value - category;\r\n            newValue.innerHTML = category;\r\n            categorySelect.appendChild(newValue);\r\n        });\r\n    }\r\n\r\n    listSelect.innerHTML = \"\";\r\n\r\n    listData.listNames.forEach((name) => {\r\n        const newValue = `<option value=\"${name}\">${name}</option>`;\r\n        listSelect.innerHTML += newValue;\r\n    });\r\n}\r\n\r\n//displays a selected tierlist by filling in the data\r\nconst displayList = (data) => {\r\n    document.getElementById('tierList').style.display = \"flex\";\r\n    const list = data.list;\r\n    const rankerUL = document.getElementById('rankerUL');\r\n    rankerUL.innerHTML = \"\";\r\n\r\n    document.getElementById('displayedListName').innerHTML = list.name;\r\n\r\n    //shows the tierlist data in a table\r\n    const items = [[], [], [], [], [], []];\r\n\r\n    for(let i = 0; i < list.items.length; i++){\r\n        items[list.scores[i]-1].push(list.items[i]);    \r\n        \r\n        const newLI = document.createElement('li');\r\n        const newLabel = document.createElement('label');\r\n        const newDiv =document.createElement('div');\r\n\r\n        newDiv.className= 'field is-grouped';\r\n        newLabel.className = 'label';\r\n        newLabel.for = `item${i}Score`;\r\n        newLabel.innerText = `${list.items[i]}: `;\r\n        const newSelect = createRankSelect(i);\r\n\r\n        rankerUL.appendChild(newLI);\r\n        newDiv.appendChild(newLabel);\r\n        newDiv.appendChild(newSelect);\r\n        newLI.appendChild(newDiv);\r\n\r\n    }\r\n\r\n    for(let i = 0; i < 6; i++){\r\n        document.getElementById(`${i+1}Items`).innerText = items[i].join(', ');\r\n    }\r\n}\r\n\r\nconst sendPost = async (url, body) => {\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        'body': body,\r\n    })\r\n\r\n    const res = await response.json();\r\n    return showMessage(res);\r\n}\r\n\r\nconst sendGet = async(url, responseHandler) => {\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n        },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if(url !== '/getLists') {showMessage(data);}\r\n    return responseHandler(data);\r\n}\r\n\r\nconst init = () => {\r\n    const initialMenu = document.getElementById('initial-menu');\r\n    const initialSelect = document.getElementById('initial-select');\r\n    const initialCreate = document.getElementById('initial-create');\r\n\r\n    const listSelection = document.getElementById('listChoiceForm');\r\n    const listCategory = document.getElementById('listCategory');\r\n    const listCreation = document.getElementById('listCreation');\r\n    const listRanker = document.getElementById('listRanker');\r\n\r\n    initialSelect.addEventListener('click', () => {\r\n        initialMenu.style.display = \"none\";\r\n        sendGet('/getLists', displaySelects);\r\n        listSelection.style.display = \"initial\";\r\n    });\r\n\r\n    initialCreate.addEventListener('click', () => {\r\n        initialMenu.style.display = \"none\";\r\n        addCreation(5);\r\n        listCreation.style.display = \"initial\";\r\n    });\r\n\r\n    listCategory.addEventListener('change', (e) => {\r\n        e.preventDefault();\r\n        const selectedCategory = document.getElementById('listCategory').value;\r\n        let url = selectedCategory ? `/getLists?category=${selectedCategory}` : '/getLists';\r\n    \r\n        sendGet(url, displaySelects);\r\n        return false;\r\n    });\r\n\r\n    listSelection.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n        const selectedList = document.getElementById('listSelect').value;\r\n        const url = selectedList ? `/getTierlist?name=${selectedList}` : '/getTierlist';\r\n    \r\n        sendGet(url, displayList);\r\n        return false;\r\n    });\r\n\r\n    //takes and sends relevant data from forms for addList\r\n    listCreation.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n\r\n        const listName = encodeURIComponent(document.querySelector('#listName').value);\r\n        const category = encodeURIComponent(document.querySelector('#categoryInput').value);\r\n        const itemOL = document.querySelector('#itemInputs');\r\n\r\n        let formData = `name=${listName}&category=${category}`;\r\n\r\n        const itemNames = [], itemScores = [];\r\n\r\n        //starting at 1 is unfortuately required due to an\r\n        //error with my structuring of tiers to numbers evaluation\r\n        for(let i = 1; i < itemOL.childElementCount + 1; i++){\r\n            itemNames.push(document.querySelector(`#item${i}`).value);\r\n            itemScores.push(document.querySelector(`#item${i}Score`).value);\r\n        }\r\n\r\n        const items = encodeURIComponent(itemNames);\r\n        const scores = encodeURIComponent(itemScores);\r\n\r\n        formData += `&items=${items}&scores=${scores}`;\r\n\r\n        sendPost('/addList', formData);\r\n        return false;\r\n    });\r\n\r\n\r\n    //takes and sends relevant data from forms for updateList\r\n    listRanker.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n\r\n        const itemUL = document.getElementById('rankerUL');\r\n\r\n        const listName = encodeURIComponent(document.getElementById('displayedListName').innerText);\r\n        const itemScores = [];\r\n\r\n        for(let i = 0; i < itemUL.childElementCount; i++){\r\n            const score = document.querySelector(`#item${i}Score`).value;\r\n            if(!score) {break;}\r\n            itemScores.push(document.querySelector(`#item${i}Score`).value);\r\n        }\r\n\r\n        const scores = encodeURIComponent(itemScores);\r\n        const formData = `name=${listName}&scores=${scores}`;\r\n\r\n        sendPost('/updateList', formData);\r\n        return false;\r\n    })\r\n}\r\n\r\nwindow.onload = init;\n\n//# sourceURL=webpack://430-project-1/./client/client.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./client/client.js"]();
/******/ 	
/******/ })()
;